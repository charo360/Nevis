/**
 * Revo 2.0 - Gemini 2.5 Flash Image (nano-banana) Service
 * Revolutionary AI model with native image generation, character consistency, and intelligent editing
 */

import { GoogleGenAI } from '@google/genai';
import { BrandProfile } from '@/lib/types';

// Get API key (following official Google AI Node.js example)
const apiKey = process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY || process.env.GOOGLE_GENAI_API_KEY;

if (!apiKey) {
  console.error("‚ùå No Google AI API key found for Revo 2.0");
}

// Initialize Google GenAI client (following official Node.js example)
const ai = new GoogleGenAI({ apiKey });

// Revo 2.0 uses Gemini 2.5 Flash Image model (following official docs)
const REVO_2_0_MODEL = 'gemini-2.5-flash-image-preview';

export interface Revo20GenerationInput {
  businessType: string;
  platform: string;
  visualStyle: string;
  imageText: string;
  brandProfile: BrandProfile;
  aspectRatio?: '1:1' | '16:9' | '9:16' | '4:3' | '3:4';
  referenceImage?: string; // Base64 encoded reference image for character consistency
  editingInstructions?: string; // For intelligent editing (inpainting/outpainting)
  characterConsistency?: boolean; // Maintain character consistency
  intelligentEditing?: boolean; // Enable intelligent editing features
}

export interface Revo20GenerationResult {
  imageUrl: string;
  model: string;
  processingTime: number;
  qualityScore: number;
  enhancementsApplied: string[];
  metadata: {
    characterConsistency: boolean;
    intelligentEditing: boolean;
    aspectRatio: string;
    textRendering: 'perfect' | 'good' | 'basic';
  };
}

/**
 * Generate content using Revo 2.0 (Gemini 2.5 Flash Image)
 */
export async function generateWithRevo20(
  input: Revo20GenerationInput
): Promise<Revo20GenerationResult> {
  const startTime = Date.now();
  console.log('üöÄ Revo 2.0: Starting next-generation AI content creation...');
  console.log('üçå Using Gemini 2.5 Flash Image (nano-banana) engine');

  try {
    // Build the revolutionary prompt for Revo 2.0
    const promptText = buildRevo20Prompt(input);
    console.log('üìù Revo 2.0 prompt:', promptText.substring(0, 200) + '...');

    // Prepare content array following official Node.js example
    const prompt: any[] = [
      { text: promptText }
    ];

    // Add reference image for character consistency if provided (following official docs)
    if (input.referenceImage && input.characterConsistency) {
      console.log('üë§ Adding reference image for character consistency...');
      const base64Data = input.referenceImage.split(',')[1]; // Remove data:image/... prefix
      prompt.push({
        inlineData: {
          mimeType: 'image/png',
          data: base64Data
        }
      });
    }

    // Generate content with Revo 2.0 using official API (following Node.js example)
    console.log('ü§ñ Generating with Revo 2.0 revolutionary AI...');
    const response = await ai.models.generateContent({
      model: REVO_2_0_MODEL,
      contents: prompt
    });

    // Extract image from response (following official Node.js example)
    let imageUrl = '';
    const enhancementsApplied = [
      'Revo 2.0 Next-Gen Engine',
      'Gemini 2.5 Flash Image Generation',
      'Native Image Generation',
      'Perfect Text Rendering'
    ];

    // Add feature-specific enhancements
    if (input.characterConsistency) {
      enhancementsApplied.push('Character Consistency');
    }
    if (input.intelligentEditing) {
      enhancementsApplied.push('Intelligent Editing');
    }

    // Process response parts (following official Node.js example structure)
    const parts = response.candidates?.[0]?.content?.parts || [];
    console.log(`üìä Response contains ${parts.length} parts`);

    for (const part of parts) {
      if (part.text) {
        console.log('üìÑ Revo 2.0 text response:', part.text.substring(0, 100) + '...');
      } else if (part.inlineData) {
        console.log('üñºÔ∏è Revo 2.0 image generated successfully!');
        console.log('üìã Image details:', {
          mimeType: part.inlineData.mimeType,
          dataLength: part.inlineData.data?.length || 0
        });

        // Create data URL (following official example)
        imageUrl = `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`;
        enhancementsApplied.push(
          'Ultra-High Quality Output',
          'Perfect Brand Consistency',
          'Platform Optimization',
          'Multimodal Reasoning'
        );
        break;
      }
    }

    if (!imageUrl) {
      throw new Error('No image generated by Revo 2.0');
    }

    const processingTime = Date.now() - startTime;
    console.log(`‚úÖ Revo 2.0 generation completed in ${processingTime}ms`);

    return {
      imageUrl,
      model: 'Revo 2.0 (Gemini 2.5 Flash Image)',
      processingTime,
      qualityScore: 10, // Maximum quality for next-gen model
      enhancementsApplied,
      metadata: {
        characterConsistency: input.characterConsistency || false,
        intelligentEditing: input.intelligentEditing || false,
        aspectRatio: input.aspectRatio || '1:1',
        textRendering: 'perfect'
      }
    };

  } catch (error) {
    console.error('‚ùå Revo 2.0 generation failed:', error);
    throw new Error(`Revo 2.0 generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * Build revolutionary prompt for Revo 2.0
 */
function buildRevo20Prompt(input: Revo20GenerationInput): string {
  const { businessType, platform, visualStyle, imageText, brandProfile, aspectRatio = '1:1' } = input;

  let prompt = `üöÄ REVO 2.0 NEXT-GENERATION AI CONTENT CREATION

Create a revolutionary, stunning social media image for ${brandProfile.businessName || businessType}.

BUSINESS PROFILE:
- Name: ${brandProfile.businessName || businessType}
- Type: ${businessType}
- Platform: ${platform} (${aspectRatio} aspect ratio)
- Style: ${visualStyle}, cutting-edge, professional

TEXT REQUIREMENTS (PERFECT RENDERING):
"${imageText}"
- Render this text with PERFECT clarity and readability
- Use premium typography with excellent contrast
- Ensure text is prominent and professionally integrated
- NO additional text, placeholders, or random words

BRAND IDENTITY:
${brandProfile.primaryColor ? `- Primary Color: ${brandProfile.primaryColor}` : ''}
${brandProfile.accentColor ? `- Accent Color: ${brandProfile.accentColor}` : ''}
${brandProfile.backgroundColor ? `- Background: ${brandProfile.backgroundColor}` : ''}

REVO 2.0 DESIGN SPECIFICATIONS:
- Ultra-high quality, next-generation aesthetics
- Perfect for ${platform} social media platform
- ${aspectRatio} aspect ratio with optimal composition
- Brand colors prominently and tastefully featured
- Clean, modern layout with perfect spacing
- ${visualStyle} aesthetic with revolutionary design elements
- Optimized for mobile and desktop viewing
- Professional typography with crystal-clear readability
- Perfect brand consistency and visual harmony`;

  // Add character consistency instructions
  if (input.characterConsistency && input.referenceImage) {
    prompt += `\n\nCHARACTER CONSISTENCY:
- Maintain the same character/subject appearance as shown in the reference image
- Keep consistent facial features, clothing style, and overall appearance
- Adapt the character to the new scene while preserving identity`;
  }

  // Add intelligent editing instructions
  if (input.intelligentEditing && input.editingInstructions) {
    prompt += `\n\nINTELLIGENT EDITING:
- ${input.editingInstructions}
- Perform precise, context-aware modifications
- Maintain overall composition and quality`;
  }

  prompt += `\n\nCreate a revolutionary, next-generation design that perfectly represents ${brandProfile.businessName || businessType} with Revo 2.0 quality standards.`;

  return prompt;
}

/**
 * Test Revo 2.0 availability following official Google AI docs
 */
export async function testRevo20Availability(): Promise<boolean> {
  try {
    console.log('üß™ Testing Revo 2.0 (Gemini 2.5 Flash Image) availability...');
    console.log('üìã Using official @google/genai package...');

    // Test using official API structure (following Node.js example)
    const response = await ai.models.generateContent({
      model: REVO_2_0_MODEL,
      contents: [
        { text: 'Create a simple test image with the text "Revo 2.0 Test" on a modern gradient background' }
      ]
    });

    // Check response structure following the docs
    console.log('üìÑ Response structure:', {
      candidates: response.candidates?.length || 0,
      parts: response.candidates?.[0]?.content?.parts?.length || 0
    });

    // Look for image data in parts (following Python docs pattern)
    const parts = response.candidates?.[0]?.content?.parts || [];
    let hasImage = false;
    let hasText = false;

    for (const part of parts) {
      if (part.text) {
        console.log('üìù Text response found:', part.text.substring(0, 100) + '...');
        hasText = true;
      }
      if (part.inlineData) {
        console.log('üñºÔ∏è Image data found:', part.inlineData.mimeType);
        hasImage = true;
      }
    }

    if (hasImage) {
      console.log('‚úÖ Revo 2.0 is available and working perfectly!');
      return true;
    } else if (hasText) {
      console.log('‚ö†Ô∏è Revo 2.0 responded with text but no image - model may not support image generation yet');
      return false;
    } else {
      console.log('‚ö†Ô∏è Revo 2.0 responded but no content found');
      return false;
    }

  } catch (error) {
    console.error('‚ùå Revo 2.0 test failed:', error);
    console.error('Error details:', {
      name: error instanceof Error ? error.name : 'Unknown',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
    return false;
  }
}

/**
 * Character consistency generation
 */
export async function generateWithCharacterConsistency(
  input: Revo20GenerationInput,
  referenceImages: string[]
): Promise<Revo20GenerationResult> {
  console.log('üë§ Revo 2.0: Generating with character consistency...');

  const enhancedInput = {
    ...input,
    referenceImage: referenceImages[0],
    characterConsistency: true,
    editingInstructions: `Maintain the same character/subject appearance as shown in the reference image while creating: ${input.imageText}`
  };

  return generateWithRevo20(enhancedInput);
}

/**
 * Intelligent editing (inpainting/outpainting)
 */
export async function performIntelligentEditing(
  baseImage: string,
  editingPrompt: string,
  brandProfile: BrandProfile
): Promise<Revo20GenerationResult> {
  console.log('‚úèÔ∏è Revo 2.0: Performing intelligent editing...');

  const input: Revo20GenerationInput = {
    businessType: brandProfile.businessType || 'Business',
    platform: 'instagram',
    visualStyle: brandProfile.visualStyle || 'modern',
    imageText: editingPrompt,
    brandProfile,
    referenceImage: baseImage,
    intelligentEditing: true,
    editingInstructions: `Edit the provided image: ${editingPrompt}. Maintain overall composition while making precise modifications.`
  };

  return generateWithRevo20(input);
}

// Export for global testing
if (typeof window !== 'undefined') {
  (window as any).testRevo20Availability = testRevo20Availability;
  (window as any).generateWithRevo20 = generateWithRevo20;
  (window as any).generateWithCharacterConsistency = generateWithCharacterConsistency;
  (window as any).performIntelligentEditing = performIntelligentEditing;
}
